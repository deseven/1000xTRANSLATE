# ==============
# === GLOBAL ===
# ==============

# The ID of the spreadsheet where your translation is going to happen
SPREADSHEET_ID=<your-google-sheets-spreadsheet-id>

# A JSON file from Google for a service account to access your spreadsheet
GOOGLE_CREDENTIALS_FILE=<your-google-credentials-json>

# Names of main sheets
SYSTEM_SHEET_NAME=System
ACTORS_SHEET_NAME=Actors
QUESTS_SHEET_NAME=Quests
DIALOGUES_SHEET_NAME=Dialogues
STRINGS_SHEET_NAME=Strings

# Names of sheets with vocabularies, without 'VOCAB:' prefix
VOCAB_CHARS_SHEET_NAME=Chars
VOCAB_TERMS_SHEET_NAME=Terms


# ====================
# === EXPORTER/BBB ===
# ====================

# 1000xRESIST data directory to get the resources from
# could be a relative or absolute path
# on Windows specifically, make sure it doesn't point to a protected directory such as Program Files
# if that's the case, you can run the toolset as admin or just copy 1000xRESIST_Data to the 1000xTRANSLATE location
GAME_DATA_DIR=1000xRESIST/1000xRESIST_Data

# 1000xRESIST Unity version, you probably don't need to change that
GAME_UNITY_VERSION=2020.3.48f1

# directory to keep the extracted resources in (will be created automatically if needed)
RES_DIR=!resources

# directory to put textures to (will be created automatically if needed)
TEXTURES_DIR=!textures

# directory to grab overrides from (will NEVER be created automatically)
OVERRIDES_DIR=!overrides

# directory to output modified bundles to (will be created automatically if needed)
OUT_DIR=!distr

# bbb post-processing command to run after import was finished
# could be anything runnable, for example 7z to pack the translation into the archive
# for Linux/macOS:
#POST_CMD=7z a localization.zip './!distr/*'
# for Windows (dotenv doesn't like this, but ):
#POST_CMD="C:\Program Files\7-Zip\7z.exe" a localization.zip .\!distr\*

# use Python parser instead of a cpp one (enable only if you like to wait more or if there are any problems)
UNITYPY_USE_PYTHON_PARSER=false


# ===============================
# === SHEETIFIER/DESHEETIFIER ===
# ===============================

# The lang to use as a reference (the one you're translating from)
# Possible values as of now are en,zh,ja
BASE_LANG=en

# The lang to replace in the game 
# (it's recommended to use the one different from BASE_LANG to avoid confusion later)
TARGET_LANG=zh

# ==========================
# === TRANSLATOR/CHECKER ===
# ==========================

# Any OpenAI-compatible endpoint should work
OPENAI_API_ENDPOINT=https://api.openai.com/v1
OPENAI_API_KEY=<your-openai-api-key>
OPENAI_MODEL=<model-to-use>
OPENAI_TEMPERATURE=0.2

# Human-readable language names
LANG_FROM=English
LANG_TO=Russian

# Example sentence for LLM, saying "Hello." in your LANG_TO
EXAMPLE_HI="Привет."

# Example sentence for LLM, saying "Hi, how are you?" in your LANG_TO
EXAMPLE_HOWRU="Привет, как дела?"